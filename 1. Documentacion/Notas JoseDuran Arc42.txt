

Question C-2-1: What are constraints?
 #requirements #constraints
Constraints restrict your freedom in decisions, concerning the system or any associated processes.

Such constraints are often imposed by organizations across multiple IT systems.

Examples:

System has to be operated by data-center XYZ, as our company has a long-term contract with them.
Part of software/hardware development has to be off-shored to our Asian subdivision.
Our operational database system needs to be IBM DB2.
System has to be implemented in Java.
Please consider also questions C-2-2, C-2-3 and C-2-4.



Question C-2-2: What types of constraints exist?
 #requirements #constraints #organization #technical
If needed, differentiate between the following types of constraints:

Organizational constraints: E.g. compliance to (standard) processes, budget, time, required information flows, 
required (management) reporting structures, adherence to certain documentation templates or conventions…

Technical constraints: Usage of specific hardware, middleware, software-components, adherence to specific technical 
or architectural decisions (e.g. use of specific frameworks or libraries)

Conventions, e.g. programming style, naming conventions or similar stuff.



Question C-2-3: What kind of constraints shall I document?
 #requirements #constraints
At first - try to avoid documentation of constraints, as somebody else might already have documented them. Refer or link to existing documentation.

Document the constraints that:

shape or shaped important architectural or technical decisions,
help people to better understand your architecture



Question C-2-4: Can/shall we negotiate constraints?
 #requirements #constraints
Should some constraints prove to be especially unfavorable, risky or even expensive for your system or its development, 
you should definitely try to negotiate them.

An example: Let’s say the company-wide constraint is: “Our software has to be developed in Java”. One of your tasks is 
the development of a specific smart-card reader, including the appropriate hardware device driver - you should 
convince your management that such software is better written in either C, Forth or Lua.





Question C-8-1: What is a 'crosscutting concept'?
 #concept
Concepts provide solutions to recurring problems.

We use the term “concept” for rules, principles or other decisions, guidelines, processes that influence one or 
more elements of the architecture.

Decisions, or concepts that cannot adequatly be assigned to a single building block
Decisions or rules that influence several:
building blocks
parts of the implementation
runtime scenarios
interfaces
several developers
Other people like to call crosscutting aspects by different names. In practice we encountered the following terms:

approaches
aspects: like in “aspect-oriented-programming”
concepts: our favorite
principles
regulations
rules
tactics: like in design tactics, a term coined in 2003 by the Software Engineering Institute. They define tactics 
as “architectural decisions that can be used to achieve desired quality attribute requirements”
strategies



Question C-8-2: Our arc42 section 8 (on concepts) is a melting pot of information we couldn't put elsewhere? How can we keep an overview?
 #concept
The variety of topics in section 8 might seem chaotic, but all topics contained have something in common: They are all crosscutting (for an explanation, see question C-8-1 (what is crosscutting)).

You shall remove (!) all concepts not relevant for your system (see question C-8-3 (deal with many concepts)).

Then you can group/order the remaining topics, either to system-specific criteria or after the following proposal:

Business or domain aspects: domain, entity or data models, the ubiquitous language from domain-driven design 
Architecture and design patterns: What (recurring) patterns have been applied, and how?
User Experience concepts (UX): How is the UI of the system implemented, what conventions or rules apply? How is usability achieved? User interface aspects, i18n, validation, accessibility
Safety and security concepts: These qualities are among the most fundamental or important for some systems.
Development: Build and build management, code generation, configuration, (automated) testing, migration
Under the hood: persistence, distribution, transactions, session-handling, caching, threading, exception and error handling, security
Operations concepts: deployment, installation, monitoring
(Initially, Stefan Zörner provided the idea of sub-structuring section 8. We expanded and slightly modified his original proposal)




